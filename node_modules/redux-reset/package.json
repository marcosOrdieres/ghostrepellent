{
  "_args": [
    [
      {
        "raw": "redux-reset@^0.3.0",
        "scope": null,
        "escapedName": "redux-reset",
        "name": "redux-reset",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/Users/marcos/ghostrepellent"
    ]
  ],
  "_from": "redux-reset@>=0.3.0 <0.4.0",
  "_id": "redux-reset@0.3.0",
  "_inCache": true,
  "_location": "/redux-reset",
  "_nodeVersion": "4.2.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/redux-reset-0.3.0.tgz_1487423423565_0.7072314256802201"
  },
  "_npmUser": {
    "name": "wwayne",
    "email": "wayne.wang0821@gmail.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-reset@^0.3.0",
    "scope": null,
    "escapedName": "redux-reset",
    "name": "redux-reset",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-reset/-/redux-reset-0.3.0.tgz",
  "_shasum": "ab80795b410d5b28689986eac40cb847a69cd012",
  "_shrinkwrap": null,
  "_spec": "redux-reset@^0.3.0",
  "_where": "/Users/marcos/ghostrepellent",
  "author": {
    "name": "wwayne"
  },
  "bugs": {
    "url": "https://github.com/wwayne/redux-reset/issues"
  },
  "dependencies": {},
  "description": "reset redux state",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-eslint": "^6.0.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-register": "^6.7.2",
    "es6-enum": "^1.0.0",
    "redux": "^3.3.1",
    "redux-thunk": "^2.0.1",
    "snazzy": "^3.0.0",
    "standard": "^6.0.8",
    "tap-spec": "^4.1.1",
    "tape": "^4.5.1"
  },
  "directories": {},
  "dist": {
    "shasum": "ab80795b410d5b28689986eac40cb847a69cd012",
    "tarball": "https://registry.npmjs.org/redux-reset/-/redux-reset-0.3.0.tgz"
  },
  "engines": {
    "node": ">=4.2.1"
  },
  "gitHead": "dacf2aaa0682b4bf62a7bdcf26b7f3afd7a57cac",
  "homepage": "https://github.com/wwayne/redux-reset",
  "keywords": [
    "redux",
    "react",
    "redux enhancer",
    "redux store enhancer",
    "js",
    "javascript",
    "redux component",
    "reset state"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "wwayne",
      "email": "wayne.wang0821@gmail.com"
    }
  ],
  "name": "redux-reset",
  "optionalDependencies": {},
  "readme": "# redux-reset\n[![Version](http://img.shields.io/npm/v/redux-reset.svg)](https://www.npmjs.org/package/redux-reset)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n[![Circle CI](https://circleci.com/gh/wwayne/redux-reset/tree/master.svg?style=svg)](https://circleci.com/gh/wwayne/redux-reset/tree/master)\n\n## Installation\n\n```sh\nnpm install redux-reset\n```\n\n## Basic Usage\n1.Setup in createStore\n\n```JavaScript\nimport reduxReset from 'redux-reset'\n...\nconst enHanceCreateStore = compose(\n    applyMiddleware(...),\n    reduxReset()  // Will use 'RESET' as default action.type to trigger reset\n  )(createStore)\nconst store = enHanceCreateStore(reducers)\n```\n\n\n2.Dispatch reset action\n\n```JavaScript\nstore.dispatch({\n  type: 'RESET'\n})\n```\n\n## Advanced Usage\n#### Set any custom action.type to trigger reset\n\n```JavaScript\nimport Enum from 'es6-enum'\nconst APP = Enum('RESET')\n\nconst enHanceCreateStore = compose(\n    applyMiddleware(...),\n    reduxReset(APP.RESET) // Set action.type here\n  )(createStore)\nconst store = enHanceCreateStore(reducers)\n\nAFTER:\nstore.dispatch({\n  type: APP.RESET\n})\n```\n\n#### Reset and specific to a new initial state\n\n```JavaScript\nstore.dispatch({\n  type: 'RESET',\n  state: {app: {user: 'anotherUser'}} // Will use this as new initial state\n})\n```\n\n#### Reset and specific to a new initial state, new state comes from a specific params in action\n\n```JavaScript\nimport Enum from 'es6-enum'\nconst APP = Enum('RESET')\n\nconst enHanceCreateStore = compose(\n    applyMiddleware(...),\n    reduxReset({\n     type: APP.RESET,\n     data: 'initialStateComesFrom'\n    })\n  )(createStore)\nconst store = enHanceCreateStore(reducers)\n\nAFTER:\nstore.dispatch({\n  type: APP.RESET,\n  initialStateComesFrom: {app: {user: 'anotherUser'}}\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wwayne/redux-reset.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "lint": "standard  --verbose | snazzy",
    "test": "npm run lint && ./node_modules/.bin/tape -r babel-register ./test/index.test.js | tap-spec"
  },
  "standard": {
    "parser": "babel-eslint",
    "ignore": [
      "lib/"
    ]
  },
  "version": "0.3.0"
}
