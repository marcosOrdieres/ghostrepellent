{
  "_args": [
    [
      {
        "raw": "redux-devtools-instrument@^1.9.0",
        "scope": null,
        "escapedName": "redux-devtools-instrument",
        "name": "redux-devtools-instrument",
        "rawSpec": "^1.9.0",
        "spec": ">=1.9.0 <2.0.0",
        "type": "range"
      },
      "/Users/marcos/ghostrepellent/node_modules/redux-devtools"
    ]
  ],
  "_from": "redux-devtools-instrument@^1.9.0",
  "_hasShrinkwrap": false,
  "_id": "redux-devtools-instrument@1.9.6",
  "_location": "/redux-devtools-instrument",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/redux-devtools-instrument_1.9.6_1548453793605_0.8264023344938918"
  },
  "_npmUser": {
    "name": "zalmoxisus",
    "email": "zalmoxisus@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-devtools-instrument@^1.9.0",
    "scope": null,
    "escapedName": "redux-devtools-instrument",
    "name": "redux-devtools-instrument",
    "rawSpec": "^1.9.0",
    "spec": ">=1.9.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/redux-devtools"
  ],
  "_resolved": "https://registry.npmjs.org/redux-devtools-instrument/-/redux-devtools-instrument-1.9.6.tgz",
  "_shasum": "6b412595f74b9d48cfd4ecc13e585b1588ed6e7e",
  "_shrinkwrap": null,
  "_spec": "redux-devtools-instrument@^1.9.0",
  "_where": "/Users/marcos/ghostrepellent/node_modules/redux-devtools",
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com",
    "url": "http://github.com/gaearon"
  },
  "bugs": {
    "url": "https://github.com/reduxjs/redux-devtools/issues"
  },
  "dependencies": {
    "lodash": "^4.2.0",
    "symbol-observable": "^1.0.2"
  },
  "description": "Redux DevTools instrumentation",
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-core": "^6.3.17",
    "babel-eslint": "^4.1.6",
    "babel-loader": "^6.2.0",
    "babel-preset-es2015-loose": "^6.1.3",
    "babel-preset-stage-0": "^6.3.13",
    "eslint": "^0.23",
    "eslint-config-airbnb": "0.0.6",
    "eslint-plugin-react": "^2.3.0",
    "expect": "^1.6.0",
    "isparta": "^3.0.3",
    "mocha": "^2.2.5",
    "redux": "^4.0.0",
    "rimraf": "^2.3.4",
    "rxjs": "^5.0.0-beta.6",
    "webpack": "^1.11.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-MwvY4cLEB2tIfWWBzrUR02UM9qRG2i7daNzywRvabOSVdvAY7s9BxSwMmVRH1Y/7QWjplNtOwgT0apKhHg2Qew==",
    "shasum": "6b412595f74b9d48cfd4ecc13e585b1588ed6e7e",
    "tarball": "https://registry.npmjs.org/redux-devtools-instrument/-/redux-devtools-instrument-1.9.6.tgz",
    "fileCount": 5,
    "unpackedSize": 54993,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcS4eiCRA9TVsSAnZWagAAoJYP/Rf+KVTKM+VeoD6JQFKa\nqFdhFEXsqkCdg1PgCQKLKhwaepCEVQxZPoJ0hBPy90sQxNTgqSUc6buMRJ40\nE5uW7miWQpcUpqdjH4nUc+WvfkcHCWVHp+A7aRJTUBX6wKnFgAon6D45rcbY\nOLJUReTIuVaMtrc9O1L4AIEgorV4qfAfj5sRUUFcBTNN40/0d70IzE+pS3dw\nHivhND7SAqTnduMre0y2quo4ufxgV5gDo0617kuAZjfLUi8s3Jg3+uPTZAeI\nWVgNT5iDn51Dr7pOk+HW/WZd0BlgW+xTCQnhyk3qppqUsxfZYx/h9/hiZzRW\nX4JkpRUsfsh1UAW8JyBogy8v44go8Uw98cWeun6w+U07zUeFzLTzJehjTGJL\nHhN/sEdUg7lPS9v/xarZT4yv715VBWXYWvoovZC7EAB9/2WcQhCiIoRcglBA\np572NRxUkqbqCBROcWr8WU+WFIV1HOicFhDmOhmFjcYfdWEP+fTPbrxTyu79\nnlbC+Pln0pqU/LT7ZW74aXUpdVts1/BkOgaHB/wFUfKu9iAiqKgE1HGT8Dmh\nUMXaEVkANItXD5bWoHBi8KgZm8qPdLgzyaAKX7wqn/6EfBb62E1MKpkq3to1\nRGHA+xWcBTGM8yk1GxKs1ZquH4ABu0FmbCYhrAsHbE6QKA0zTmFlnJDBHLa+\nbc3A\r\n=Pdo8\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib",
    "src"
  ],
  "homepage": "https://github.com/reduxjs/redux-devtools",
  "keywords": [
    "redux",
    "devtools",
    "flux",
    "hot reloading",
    "time travel",
    "live edit"
  ],
  "license": "MIT",
  "main": "lib/instrument.js",
  "maintainers": [
    {
      "name": "zalmoxisus",
      "email": "zalmoxisus@gmail.com"
    }
  ],
  "name": "redux-devtools-instrument",
  "optionalDependencies": {},
  "readme": "Redux DevTools Instrumentation\n==============================\n\nRedux enhancer used along with [Redux DevTools](https://github.com/reduxjs/redux-devtools) or [Remote Redux DevTools](https://github.com/zalmoxisus/remote-redux-devtools).\n\n### Installation\n\n```\nnpm install --save-dev redux-devtools-instrument\n```\n\n### Usage\n\nAdd the store enhancer:\n\n##### `store/configureStore.js`\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport devTools from 'remote-redux-devtools';\nimport reducer from '../reducers';\n\n// Usually you import the reducer from the monitor\n// or apply with createDevTools as explained in Redux DevTools\nconst monitorReducer = (state = {}, action) => state; \n\nexport default function configureStore(initialState) {\n  const enhancer = compose(\n    applyMiddleware(...middlewares),\n    // other enhancers and applyMiddleware should be added before the instrumentation\n    instrument(monitorReducer, { maxAge: 50 })\n  );\n  \n  // Note: passing enhancer as last argument requires redux@>=3.1.0\n  return createStore(reducer, initialState, enhancer);\n}\n```\n\n### API\n\n`instrument(monitorReducer, [options])`\n\n- arguments\n  - **monitorReducer** *function* called whenever an action is dispatched ([see the example of a monitor reducer](https://github.com/gaearon/redux-devtools-log-monitor/blob/master/src/reducers.js#L13)).\n  - **options** *object*\n    - **maxAge** *number* or *function*(currentLiftedAction, previousLiftedState) - maximum allowed actions to be stored on the history tree, the oldest actions are removed once `maxAge` is reached. Can be generated dynamically with a function getting current action as argument.\n    - **shouldCatchErrors** *boolean* - if specified as `true`, whenever there's an exception in reducers, the monitors will show the error message, and next actions will not be dispatched.\n    - **shouldRecordChanges** *boolean* - if specified as `false`, it will not record the changes till `pauseRecording(false)` is dispatched. Default is `true`.\n    - **pauseActionType** *string* - if specified, whenever `pauseRecording(false)` lifted action is dispatched and there are actions in the history log, will add this action type. If not specified, will commit when paused.\n    - **shouldStartLocked** *boolean* - if specified as `true`, it will not allow any non-monitor actions to be dispatched till `lockChanges(false)` is dispatched. Default is `false`.\n    - **shouldHotReload** *boolean* - if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Default to `true`.\n    - **trace** *boolean* or *function* - if set to `true`, will include stack trace for every dispatched action. You can use a function (with action object as argument) which should return `new Error().stack` string, getting the stack outside of reducers. Default to `false`.\n    - **traceLimit** *number* - maximum stack trace frames to be stored (in case `trace` option was provided as `true`). By default it's `10`. If `trace` option is a function, `traceLimit` will have no effect, that should be handled there like so: `trace: () => new Error().stack.split('\\n').slice(0, limit+1).join('\\n')` (`+1` is needed for Chrome where's an extra 1st frame for `Error\\n`).\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reduxjs/redux-devtools.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "clean": "rimraf lib",
    "lint": "eslint src test",
    "prepare": "npm run build",
    "prepublishOnly": "npm run lint && npm run test && npm run clean && npm run build",
    "test": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive",
    "test:cov": "babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha -- --recursive",
    "test:watch": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive --watch"
  },
  "version": "1.9.6"
}
